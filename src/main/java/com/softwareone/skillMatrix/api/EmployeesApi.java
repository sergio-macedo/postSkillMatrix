/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.softwareone.skillMatrix.api;

import com.softwareone.skillMatrix.model.Employee;
import com.softwareone.skillMatrix.model.Language;
import com.softwareone.skillMatrix.model.Skill;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-11-26T10:17:25.614Z[GMT]")
@Validated
public interface EmployeesApi {

    @Operation(summary = "adds a new employee", description = "Add a new employee to the system", security = {
        @SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"admin"        })    }, tags={ "employees" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "201", description = "Success. Body includes the auto-generated key for the new customer", content = @Content(mediaType = "text/plain", schema = @Schema(implementation = Integer.class))),

        @ApiResponse(responseCode = "405", description = "Invalid Input") })
    @RequestMapping(value = "/employees",
        produces = { MediaType.APPLICATION_JSON_VALUE },
        consumes = { MediaType.APPLICATION_JSON_VALUE },
        method = RequestMethod.POST)
    ResponseEntity<Employee> addEmployee(@Parameter(in = ParameterIn.DEFAULT, description = "the new employee data in JSON format", required=true, schema=@Schema()) @Valid @RequestBody Employee body);

    @Operation(summary = "delete an existing employee", description = "Deletes an existing employee in the system.", security = {
        @SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"admin"        })    }, tags={ "employees" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "The employee was deleted", content = @Content(mediaType = "*/*", schema = @Schema(implementation = Employee.class))),

        @ApiResponse(responseCode = "404", description = "Employee Not Found"),

        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/employees/{id}",
        produces = { "*/*" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteEmployee(@Parameter(in = ParameterIn.PATH, description = "the id of the employee to delete", required=true, schema=@Schema()) @PathVariable("id") String id);

    @Operation(summary = "get employees per id.", description = "", security = {
        @SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"admin"        })    }, tags={ "employees" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "retrieves successfully the specific employee", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Employee.class))),

        @ApiResponse(responseCode = "400", description = "Bad Request"),

        @ApiResponse(responseCode = "404", description = "Employee not found") })
    @RequestMapping(value = "/employees/{id}",
        produces = { MediaType.APPLICATION_JSON_VALUE },
        method = RequestMethod.GET)
    ResponseEntity<Employee> getEmployeeById(@Parameter(in = ParameterIn.PATH, description = "the id from the employee", required=true, schema=@Schema()) @PathVariable("id") String id);

    @Operation(summary = "reads all employees data", description = "This operation provides a view of the employee data in JSON", security = {
        @SecurityRequirement(name = "OAuth2", scopes = {
            "read",
"admin"        })    }, tags={ "employees" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(mediaType = MediaType.APPLICATION_JSON_VALUE, schema = @Schema(implementation = Employee.class))),

        @ApiResponse(responseCode = "404", description = "could not access the employees.") })
    @RequestMapping(value = "/employees",
        produces = { MediaType.APPLICATION_JSON_VALUE },
        method = RequestMethod.GET)
    ResponseEntity<List<Employee>> getAllEmployees(
            @Parameter(in = ParameterIn.QUERY, description = "Filter employees where first or last name has any match.", required=false, schema=@Schema()) @RequestParam(value = "name", required = false) String name,
            @Parameter(in = ParameterIn.QUERY, description = "Filter employees with skill name.", required=false, schema=@Schema()) @RequestParam(value = "skillName", required = false) String skillName,
            @Parameter(in = ParameterIn.QUERY, description = "Filter employees with language name.", required=false, schema=@Schema()) @RequestParam(value = "languageName", required = false) String languageName

    );


    @Operation(summary = "update existing employee", description = "Updates an existing employee with new data", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
        @ApiResponse(responseCode = "204", description = "Success."),

        @ApiResponse(responseCode = "404", description = "Customer Not Found"),

        @ApiResponse(responseCode = "500", description = "Internal Server Error") })
    @RequestMapping(value = "/employees/{id}",
        consumes = { MediaType.APPLICATION_JSON_VALUE },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateEmployee(@Parameter(in = ParameterIn.PATH, description = "the id of the employee to update", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "the updated customer data in JSON format", required=true, schema=@Schema()) @Valid @RequestBody Employee body);


    @Operation(summary = "post a skill to a specific employee", description = "", security = {
            @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Skill.class)))),

            @ApiResponse(responseCode = "404", description = "could not access the skill on said id.") })
    @RequestMapping(value = "/employees/{id}/skills",
            produces = { MediaType.APPLICATION_JSON_VALUE },
            consumes = { MediaType.APPLICATION_JSON_VALUE },
            method = RequestMethod.POST)
    ResponseEntity<Void> employeeAddSkills(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", schema=@Schema()) @Valid @RequestBody Skill body);


  // TODO implementation in controller is almost done, if there's enough time, fix it
    @Operation(summary = "delete an employee specific skill", description = "", security = {
            @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "search results matching criteria", content = @Content(mediaType = "*/*", schema = @Schema(implementation = Skill.class))),

            @ApiResponse(responseCode = "404", description = "could not access the skill on said id.") })
    @RequestMapping(value = "/employees/{id}/skills/{skillId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> employeeDeleteSkill(@Parameter(in = ParameterIn.PATH, description = "Id of the employee to delete", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("skillId") String skillId);


    @Operation(summary = "get all the skills from a specific employee", description = "", security = {
            @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Skill.class)))),

            @ApiResponse(responseCode = "404", description = "could not access the skill on said id.") })
    @RequestMapping(value = "/employees/{id}/skills",
            produces = { MediaType.APPLICATION_JSON_VALUE },
            method = RequestMethod.GET)
    ResponseEntity<List<Skill>> employeeGetSkills(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "update a employee specific skill", description = "", security = {
            @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "search results matching criteria", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Skill.class)))),

            @ApiResponse(responseCode = "404", description = "could not access the skill on said id.") })
    @RequestMapping(value = "/employees/{id}/skills/{skillId}",
            produces = { MediaType.APPLICATION_JSON_VALUE },
            consumes = { MediaType.APPLICATION_JSON_VALUE },
            method = RequestMethod.PUT)
    ResponseEntity<Void> employeeUpdateSkill(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("skillId") String skillId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Skill skill);

    @Operation(summary = "post a language to a specific employee", description = "", security = {
            @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "search results matching criteria", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Language.class)))),

            @ApiResponse(responseCode = "404", description = "could not access the skill on said id.") })
    @RequestMapping(value = "/employees/{id}/languages",
            produces = { MediaType.APPLICATION_JSON_VALUE },
            consumes = { MediaType.APPLICATION_JSON_VALUE },
            method = RequestMethod.POST)
    ResponseEntity<Void> employeeAddLanguages(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", schema=@Schema()) @Valid @RequestBody Language body);


    @Operation(summary = "delete an employee specific language", description = "", security = {
            @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "204", description = "search results matching criteria", content = @Content(mediaType = "*/*", schema = @Schema(implementation = Language.class))),

            @ApiResponse(responseCode = "404", description = "could not access the language on said id.") })
    @RequestMapping(value = "/employees/{id}/languages/{languageId}",
            method = RequestMethod.DELETE)
    ResponseEntity<Void> employeeDeleteLanguage(@Parameter(in = ParameterIn.PATH, description = "Id of the employee which language will be deleted ", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "id of the language to delete", required=true, schema=@Schema()) @PathVariable("languageId") String languageId);

 //  @Operation(summary = "delete an employee specific skill", description = "", security = {
 //          @SecurityRequirement(name = "basicAuth")    }, tags={ "employees" })
 //  @ApiResponses(value = {
 //          @ApiResponse(responseCode = "204", description = "search results matching criteria", content = @Content(mediaType = "*/*", schema = @Schema(implementation = Skill.class))),

 //          @ApiResponse(responseCode = "404", description = "could not access the skill on said id.") })
 //  @RequestMapping(value = "/employees/{id}/skills/{skillId}",
 //          method = RequestMethod.DELETE)
 //  ResponseEntity<Void> employeeDeleteSkill(@Parameter(in = ParameterIn.PATH, description = "Id of the employee to delete", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("skillId") String skillId);





    //TODO writing the filter.
//    @Operation(summary = "Returns the employee based on requested data ", description = "Returns list of employee after filtering", tags={ "employee" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Employee.class)))),
//
//            @ApiResponse(responseCode = "400", description = "Invalid status value") })
//    @RequestMapping(value = "/employee/filterBySkillAndSkillLevel",
//            produces = { MediaType.APPLICATION_JSON_VALUE },
//            method = RequestMethod.GET)
//    ResponseEntity<List<Employee>> filterBySkillAndSkillLevel(@NotNull @Parameter(in = ParameterIn.QUERY, description = "  Uses the filter params" ,required=true,schema=@Schema(allowableValues={ "skill", "proficiency" }
//    )) @Valid @RequestParam(value = "status", required = true) List<String> status);
//
//
//    @Operation(summary = "Returns the employee based on requested data ", description = "Returns list of employee after filtering", tags={ "employee" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Employee.class)))),
//
//            @ApiResponse(responseCode = "400", description = "Invalid status value") })
//    @RequestMapping(value = "/employee/filterBySkills",
//            produces = { MediaType.APPLICATION_JSON_VALUE },
//            method = RequestMethod.GET)
//    ResponseEntity<List<Employee>> filterBySkills(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Status values that need to be considered for filter" ,required=true,schema=@Schema(allowableValues={ "skill1", "skill2", "skill3" }
//    )) @Valid @RequestParam(value = "status", required = true) List<String> status);
}
